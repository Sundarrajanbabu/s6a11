name: ML Pipeline

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Train model
      run: |
        python train.py
        
    - name: Check Parameter Count
      run: |
        python -c "
        from train import Net
        import torch
        model = Net()
        total_params = sum(p.numel() for p in model.parameters())
        print(f'Total Parameters: {total_params:,}')
        assert total_params < 18000, f'Parameter count {total_params:,} exceeds limit of 18,000'
        "
        
    - name: Verify BatchNorm Layers
      run: |
        python -c "
        from train import Net
        import torch.nn as nn
        model = Net()
        has_bn = any(isinstance(m, nn.BatchNorm2d) for m in model.modules())
        print(f'BatchNorm Layers: {"Present" if has_bn else "Missing"}')
        assert has_bn, 'Model must include BatchNorm layers'
        "
        
    - name: Verify Dropout Implementation
      run: |
        python -c "
        from train import Net
        import torch.nn as nn
        model = Net()
        has_dropout = any(isinstance(m, nn.Dropout) for m in model.modules())
        print(f'Dropout Layers: {"Present" if has_dropout else "Missing"}')
        assert has_dropout, 'Model must include Dropout layers'
        "
        
    - name: Verify Fully Connected Layer
      run: |
        python -c "
        from train import Net
        import torch.nn as nn
        model = Net()
        has_fc = any(isinstance(m, nn.Linear) for m in model.modules())
        print(f'Fully Connected Layer: {"Present" if has_fc else "Missing"}')
        assert has_fc, 'Model must include Fully Connected layer'
        "
        
    - name: Test Model Accuracy
      run: |
        pytest test_model.py -v
        
    - name: Upload trained model
      uses: actions/upload-artifact@v4
      with:
        name: trained-model
        path: model_*.pth
        retention-days: 5