name: ML Pipeline

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Train model
      run: |
        python train.py

    - name: "ðŸ“ˆ Validation Accuracy Check (> 99.4%)"
      run: |
        python -c "
        from train import Net, evaluate
        import torch
        import glob
        import os
        from torch.utils.data import random_split
        from torchvision import datasets, transforms
        
        # Setup
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        model = Net().to(device)
        model.load_state_dict(torch.load(max(glob.glob('model_*.pth'), key=os.path.getctime)))
        model.eval()
        
        # Load and split dataset
        transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])
        full_dataset = datasets.MNIST('data', train=True, download=True, transform=transform)
        
        # Use the same split as training
        train_size = 50000
        val_size = len(full_dataset) - train_size
        _, val_dataset = random_split(full_dataset, [train_size, val_size])
        val_loader = torch.utils.data.DataLoader(val_dataset, batch_size=1000)
        
        # Evaluate
        val_acc = evaluate(model, device, val_loader)
        print(f'Validation Accuracy: {val_acc:.2f}%')
        assert val_acc > 99.4, f'Validation accuracy {val_acc:.2f}% is less than required 99.4%'
        "
        
    - name: "ðŸ”¢ Architecture Check: Parameters < 20K"
      run: |
        python -c "
        from train import Net
        import torch
        model = Net()
        total_params = sum(p.numel() for p in model.parameters())
        print(f'Total Parameters: {total_params:,}')
        assert total_params < 20000, f'Parameter count {total_params:,} exceeds limit of 20,000'
        "
        
    - name: "ðŸ”„ Architecture Check: BatchNorm Present"
      run: |
        python -c "
        from train import Net
        import torch.nn as nn
        model = Net()
        bn_count = sum(1 for m in model.modules() if isinstance(m, nn.BatchNorm2d))
        print(f'BatchNorm Layers Found: {bn_count}')
        assert bn_count > 0, 'Model must include BatchNorm layers'
        "
        
    - name: "ðŸŽ² Architecture Check: Dropout Present"
      run: |
        python -c "
        from train import Net
        import torch.nn as nn
        model = Net()
        dropout_count = sum(1 for m in model.modules() if isinstance(m, nn.Dropout))
        print(f'Dropout Layers Found: {dropout_count}')
        assert dropout_count > 0, 'Model must include Dropout layers'
        "
        
    - name: "ðŸ”Œ Architecture Check: FC Layer Present"
      run: |
        python -c "
        from train import Net
        import torch.nn as nn
        model = Net()
        fc_count = sum(1 for m in model.modules() if isinstance(m, nn.Linear))
        print(f'Fully Connected Layers Found: {fc_count}')
        assert fc_count > 0, 'Model must include Fully Connected layer'
        "
        
    - name: Upload trained model
      uses: actions/upload-artifact@v4
      with:
        name: trained-model
        path: model_*.pth
        retention-days: 5